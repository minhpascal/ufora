/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/EventBroadcaster.hpp"
#include "BigVectorId.hppml"
#include "PageId.hppml"
#include "PageDataPlacements.hppml"

class OnDemandMemoryRegions;
class VectorDataMemoryManager;
class CallbackScheduler;

namespace TypedFora {
namespace Abi {

class BigVectorLayouts;

}
}

namespace Fora {

class PageId;

namespace Interpreter {

class ExecutionContext;

}
}


class VectorDataMappedMemoryImpl;

class VectorDataMappedMemory : public PolymorphicSharedPtrBase<VectorDataMappedMemory> {
public:
    @type DataLoadRequiredEvent = 
        Fora::PageId page,
        IntegerRange neededIndices
        ;

    VectorDataMappedMemory(
            PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
            PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM,
            PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> inBigVectorLayouts
            );

    //get an address for the memory contained in a bigvec. If the bigvec is not
    //amenable to this kind of mapping, or has been dropped, then this may return nullptr.
    uint8_t* addressForBigvec(const Fora::BigVectorId& id);

    //get an address for the memory contained in a page. This is usually only mapped
    //temporarily, when clients need to access a page with an off-alignment (say, because
    //a homogenous POD vector has been appended to a vector of another type and clients
    //are reading from both at the same time.. If we've already called this once,
    //we merely incref and return the existing pointer
    uint8_t* allocateAddressForPage(const Fora::PageId& inPage, int64_t valueCount, int64_t valueStride);

    //deallocate an address for a page. This decrefs. When the number of decrefs hits zero,
    //the pointer is no longer valid.
    void deallocateAddressForPage(const Fora::PageId& inPage);

    //drop this bigvec and invalidate all pointers to it
    void bigvecDroppedAcrossEntireSystem(const Fora::BigVectorId& id);
   
    //allocate and populate data for a portion of a page.
    //the data is owned by the mapper and allocated from the supplied
    //VDMM. Returns true on success, false if we were unable to allocate space for
    //the data from the VDMM. The data is not considered active until the populate
    //func returns
    bool allocatePageData(
                    const Fora::PageId& inPage, 
                    IntegerRange valueRange,
                    uint64_t homogenousStride,
                    boost::function<void (uint8_t*, IntegerRange)> inPopulateFunc
                    );


    void visitPageData(
                    const Fora::PageId& inPage,
                    boost::function<void (uint8_t*, IntegerRange)> inVisitFunc
                    );

    //remove the given data from the mapping (deallocating it completely)
    void deallocatePageData(const Fora::PageId& inPage);

    //a thread has blocked
    EventBroadcaster<DataLoadRequiredEvent>& getOnDataLoadRequiredEvent();

private:
    PolymorphicSharedPtr<VectorDataMappedMemoryImpl> mImpl;
};


