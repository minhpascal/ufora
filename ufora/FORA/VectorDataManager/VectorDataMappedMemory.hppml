/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/EventBroadcaster.hpp"
#include "BigVectorId.hppml"
#include "../Vector/VectorDataID.hppml"

class OnDemandMemoryRegions;
class VectorDataMemoryManager;
class CallbackScheduler;

namespace TypedFora {
namespace Abi {

class BigVectorLayouts;

}
}

namespace Fora {

class PageId;

namespace Interpreter {

class ExecutionContext;

}
}


class VectorDataMappedMemoryImpl;

class VectorDataMappedMemory {
public:
    @type ThreadBlockedEvent = 
            PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> context,
            Fora::BigVectorId bigvec,
            IntegerRange neededIndices
            ;

    VectorDataMappedMemory(
            PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
            PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM,
            PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> inBigVectorLayouts
            );

    //get an address for the memory contained in a bigvec. If the bigvec is not
    //amenable to this kind of mapping, or has been dropped, then this may return nullptr.
    uint8_t* addressForBigvec(const Fora::BigVectorId& id);

    //drop this bigvec and invalidate all pointers to it
    void bigvecDroppedAcrossEntireSystem(const Fora::BigVectorId& id);
   
    //allocate and populate data for a portion of a page.
    //the data is owned by the mapper and allocated from the supplied
    //VDMM. Returns true on success, false if we were unable to allocate space for
    //the data from the VDMM. The data is not considered active until the populate
    //func returns
    bool allocatePageData(
                    const VectorDataID& inPage, 
                    IntegerRange valueRange,
                    uint64_t homogenousStride,
                    boost::function<void (uint8_t*)> inPopulateFunc
                    );


    void visitPageData(
                    const VectorDataID& inPage,
                    boost::function<void (uint8_t*, IntegerRange)> inVisitFunc
                    );

    //remove the given data from the mapping (deallocating it completely)
    void deallocatePageData(const VectorDataID& inPage);

    //a thread has blocked
    EventBroadcaster<ThreadBlockedEvent>& getThreadBlockedEvent();

private:
    boost::shared_ptr<VectorDataMappedMemoryImpl> mImpl;
};


