/***************************************************************************
    Copyright 2016 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "VectorDataMappedMemory.hppml"
#include "VectorDataMemoryManager.hppml"
#include "OnDemandMemoryRegions.hppml"
#include "../Core/ExecutionContext.hppml"
#include "VectorDataManager.hppml"

class VectorDataMappedMemoryImpl {
public:
    VectorDataMappedMemoryImpl(
                PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
                PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM,
                PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> inBigVectorLayouts
                ) :
            mThreadBlockedEvent(inCallbackScheduler),
            mVDMM(inVDMM),
            mPageLayouts(inBigVectorLayouts),
            mMemoryRegions(
                boost::bind(&VectorDataMappedMemoryImpl::onThreadBlocked, this, boost::arg<1>()),
                boost::bind(&VectorDataMappedMemoryImpl::extractCurrentBlockedThreadInfo, this),
                "/ufora"
                )
        {

        }

    void onThreadBlocked(OnDemandMemoryRegions::BlockingThread thread)
        {

        }

    void* extractCurrentBlockedThreadInfo()
        {
        Fora::Interpreter::ExecutionContext* context = 
            Fora::Interpreter::ExecutionContext::currentExecutionContext();

        if (!context)
            return nullptr;

        if (context->getVDM().getMemoryManager() == mVDMM)
            return context;

        return nullptr;
        }

    uint8_t* addressForBigvec(const Fora::BigVectorId& id)
        {
        return nullptr;
        }

    void bigvecDroppedAcrossEntireSystem(const Fora::BigVectorId& id)
        {
        }
   
    bool allocatePageData(
                    const VectorDataID& inPage, 
                    IntegerRange valueRange,
                    uint64_t homogenousStride,
                    boost::function<void (uint8_t*)> inPopulateFunc
                    )
        {
        return false;
        }

    void deallocatePageData(const VectorDataID& inPage)
        {
        }

    EventBroadcaster<VectorDataMappedMemory::ThreadBlockedEvent>& getThreadBlockedEvent()
        {
        return mThreadBlockedEvent;
        }

private:
    boost::mutex mMutex;

    EventBroadcaster<VectorDataMappedMemory::ThreadBlockedEvent> mThreadBlockedEvent;

    PolymorphicSharedPtr<VectorDataMemoryManager> mVDMM;

    PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> mPageLayouts;

    OnDemandMemoryRegions mMemoryRegions;
};


VectorDataMappedMemory::VectorDataMappedMemory(
            PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
            PolymorphicSharedPtr<VectorDataMemoryManager> inVDMM,
            PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> inBigVectorLayouts
            ) : 
        mImpl(
            new VectorDataMappedMemoryImpl(
                inCallbackScheduler,
                inVDMM,
                inBigVectorLayouts
                )
            )
    {
    }

uint8_t* VectorDataMappedMemory::addressForBigvec(const Fora::BigVectorId& id)
    {
    return mImpl->addressForBigvec(id);
    }

void VectorDataMappedMemory::bigvecDroppedAcrossEntireSystem(const Fora::BigVectorId& id)
    {
    mImpl->addressForBigvec(id);
    }

bool VectorDataMappedMemory::allocatePageData(
                const VectorDataID& inPage, 
                IntegerRange valueRange,
                uint64_t homogenousStride,
                boost::function<void (uint8_t*)> inPopulateFunc
                )
    {
    return mImpl->allocatePageData(inPage, valueRange, homogenousStride, inPopulateFunc);
    }

void VectorDataMappedMemory::visitPageData(
                const VectorDataID& inPage,
                boost::function<void (uint8_t*, IntegerRange)> inVisitFunc
                )
    {
    
    }


void VectorDataMappedMemory::deallocatePageData(const VectorDataID& inPage)
    {
    mImpl->deallocatePageData(inPage);
    }

EventBroadcaster<VectorDataMappedMemory::ThreadBlockedEvent>& VectorDataMappedMemory::getThreadBlockedEvent()
    {
    return mImpl->getThreadBlockedEvent();
    }
