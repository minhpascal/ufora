/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/CPPMLPrettyPrinter.hppml"

namespace Fora {

@type MemoryUsage =
	uint64_t totalBytesUsed,
	uint64_t bytesUsedByExternalProcesses,
	uint64_t bytesUsedByExternalSharedMemory,
	uint64_t bytesUsedByContextsExcludingPagelets,
	uint64_t bytesUsedByVectorsExcludingPagelets,
	uint64_t bytesUsedByAllPagelets,
	uint64_t bytesUsedByPageletsInVectors,
	uint64_t bytesUsedByHandles,
	uint64_t bytesUsedByDataTasks,
	uint64_t maxMemoryAvailable
{
public:
	MemoryUsage operator+(const MemoryUsage& other) const
		{
		return MemoryUsage(
			totalBytesUsed() + other.totalBytesUsed(),
			bytesUsedByExternalProcesses() + other.bytesUsedByExternalProcesses(),
			bytesUsedByExternalSharedMemory() + other.bytesUsedByExternalSharedMemory(),
			bytesUsedByContextsExcludingPagelets() + other.bytesUsedByContextsExcludingPagelets(),
			bytesUsedByVectorsExcludingPagelets() + other.bytesUsedByVectorsExcludingPagelets(),
			bytesUsedByAllPagelets() + other.bytesUsedByAllPagelets(),
			bytesUsedByPageletsInVectors() + other.bytesUsedByPageletsInVectors(),
			bytesUsedByHandles() + other.bytesUsedByHandles(),
			bytesUsedByDataTasks() + other.bytesUsedByDataTasks(),
			maxMemoryAvailable() + other.maxMemoryAvailable()
			);
		}

	uint64_t bytesAvailableForVectorsAndDataTasks() const
		{
		return maxMemoryAvailable() - bytesUsedByContextsExcludingPagelets() 
			- bytesUsedByPageletsOnlyInExecutionContexts()
			- bytesUsedByExternalProcesses()
			;
		}

	uint64_t bytesUsedByPageletsOnlyInExecutionContexts() const
		{
		if (bytesUsedByPageletsInVectors() < bytesUsedByAllPagelets())
			return bytesUsedByAllPagelets() - bytesUsedByPageletsInVectors();
		else
			return 0;
		}
};

}

template<>
class CPPMLPrettyPrint<Fora::MemoryUsage> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const Fora::MemoryUsage& t);
};


