/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Vector/VectorDataID.hppml"
#include "../TypedFora/ABI/BigVectorHandle.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../../core/PolymorphicSharedPtr.hpp"
#include <boost/unordered_map.hpp>
#include <boost/unordered_set.hpp>
#include <boost/enable_shared_from_this.hpp>
#include "../../core/containers/UnorderedTwoWaySetMap.hpp"
#include "../../cumulus/MachineId.hppml"
#include "MappableMemoryPool.hppml"

class MemoryPool;
class VectorPage;

namespace Fora {
namespace Interpreter {

class ExecutionContextImpl;

}
}

namespace TypedFora {
namespace Abi {

class BigVectorPageLayout;

}
}

class VectorPages : public PolymorphicSharedPtrBase<VectorPages> {
public:
	VectorPages(PolymorphicSharedPtr<CallbackScheduler> inGarbageCollectionCallbackScheduler);

	~VectorPages();

	void setMachineId(Cumulus::MachineId inMachineId)
		{
		mMachineId = inMachineId;
		}

	boost::shared_ptr<VectorPage> getVectorPage(Fora::PageId inPage);

	void addVectorPage(boost::shared_ptr<VectorPage> inPage);

	bool hasPage(Fora::PageId inPage);

	boost::shared_ptr<VectorPage> dropVectorPage(Fora::PageId pageId);

	bool hasUnreferencedPages() const;

	uword_t getBytecountOfUnreferencedPages() const;

	size_t getCountOfUnreferencedPages() const;

	uword_t getBytesInReferencedPages() const;

	size_t getCountOfReferencedPages() const;

	size_t getCountOfReferencedPagesExcludingUndroppedPages() const;

	uword_t getTotalBytesUsed() const;

	size_t bytesOfPagesToDropWhenFullyUnreferenced() const;

	bool hasPagesToDropWhenFullyUnreferenced();

	std::set<Fora::PageId> copyOfAllPageIds() const;

	Nullable<Fora::PageId> oldestUnmappedPage() const;

	void triggerUnmapOfAllVectorPages();

	void blockUntilAllVectorPagesAreUnmapped();

	bool isWaitingForAllVectorPagesToUnmap();

	void allowVectorPagesToBeMappedAgain();

	bool areNoPagesMapped_() const;

	void vectorPageSizeChanged(Fora::PageId pageId, int64_t newSizeInBytes);

	void triggerNotificationIfNecessary_();

	void checkCollapseSmallPagelets(Fora::PageId pageId);

	void handleStateChange(
				boost::shared_ptr<VectorPage> inPage,
				MappableMemoryPool::UnmapState oldState,
				MappableMemoryPool::UnmapState newState
				);

	static void handleStateChangeStatic(
				PolymorphicSharedWeakPtr<VectorPages> vecPagesWeak,
				boost::weak_ptr<VectorPage> pageWeak,
				MappableMemoryPool::UnmapState state,
				MappableMemoryPool::UnmapState newState
				);

private:
	mutable boost::recursive_mutex mMutex;

	boost::unordered_set<Fora::PageId> mDroppedPages;

	Cumulus::MachineId mMachineId;

	void touchPage_(Fora::PageId inPage);

	uword_t mBytesInUnreferencedPages;

	uword_t mBytesInReferencedPages;

	uword_t mBytesInPagesPendingDrop;

	bool mWaitingForAllVectorPagesToBeUnmapped;

	map<Fora::PageId, int64_t> mPageSizes;

	MapWithIndex<Fora::PageId, double> mPageTouchTimes;

	boost::unordered_set<Fora::PageId> mUnreferencedPageIds;

	boost::unordered_set<Fora::PageId> mReferencedPageIds;

	std::set<boost::shared_ptr<VectorPage> > mPagesToDropWhenFullyUnreferenced;

	MapWithIndex<boost::shared_ptr<VectorPage>, MappableMemoryPool::UnmapState> mMappingStates;

	boost::unordered_map<Fora::PageId, boost::shared_ptr<VectorPage> > mVectorPages;

	boost::condition_variable_any mNoPagesAreMappedCondition;

	PolymorphicSharedPtr<CallbackScheduler> mGarbageCollectionCallbackScheduler;
};


