/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../VectorDataManager/PageId.hppml"
#include "../../VectorDataManager/BigVectorId.hppml"
#include "../../VectorDataManager/BigVectorSlice.hppml"
#include "../../Core/MemoryPool.hpp"
#include "../../../cumulus/MachineId.hppml"
#include "../../../core/math/Hash.hpp"
#include "../../../core/containers/TwoWaySetMap.hpp"
#include "../../../core/containers/MapWithIndex.hpp"
#include "../../../core/EventBroadcaster.hpp"
#include <boost/thread.hpp>
#include <map>

#include "BigVectorPageLayout.hppml"

class VectorDataMemoryManager;

namespace Cumulus {

class CumulusWorkerAddDropEvent;

class AddDropFinalState;

}

namespace TypedFora {
namespace Abi {

class BigVectorHandle;

class BigVectorLayouts : public PolymorphicSharedPtrBase<BigVectorLayouts> {
public:
	BigVectorLayouts();

	BigVectorPageLayout getLayoutForId(const Fora::BigVectorId& identity);

	BigVectorPageLayout getLayoutForId(const hash_type& identityGuid);

	Nullable<BigVectorPageLayout> tryGetLayoutForId(const hash_type& identityGuid);

	Nullable<BigVectorPageLayout> tryGetLayoutForId(const Fora::BigVectorId& identityGuid);

	bool hasSeenIdGuid(hash_type guid);

	ImmutableTreeSet<Fora::PageId> dropLayoutForIdAndReturnOrphanedPages(const Fora::BigVectorId& identity);

	uint64_t computeBytecountForHashes(ImmutableTreeSet<hash_type> bigvecIdHashes);

	void registerNewLayout(const BigVectorPageLayout& pageLayout);

	void registerSyntheticPage(const Fora::PageId& inPage, const BigVectorPageLayout& inLayout);

	void syntheticPageRealized(const Fora::PageId& inPage);

	Nullable<BigVectorPageLayout> isPageSynthetic(const Fora::PageId& inPageId);

	ImmutableTreeSet<Fora::BigVectorId> getAllBigvecIdentities();

	ImmutableTreeSet<Fora::BigVectorId> getBigvecsContaining(ImmutableTreeSet<Fora::PageId> pages);

	void setMachineId(Cumulus::MachineId inMachineId)
		{
		mMachineId = inMachineId;
		}

	ImmutableTreeVector<Fora::PageId> convertSliceToPages(Fora::BigVectorSlice slice);

	ImmutableTreeVector<TypedFora::Abi::VectorDataIDSlice> bigVectorSliceToVectorIDSlices(
								const Fora::BigVectorSlice& slice
								);

	Fora::BigVectorId registerBigVectorSlice(Fora::BigVectorId id, IntegerRange seq, hash_type vecHash);

	Fora::BigVectorId registerBigVectorSlice(
						Fora::BigVectorId id,
						Nullable<int64_t> low,
						Nullable<int64_t> high,
						hash_type vecHash
						);

	Fora::BigVectorId registerBigVectorConcat(
							Fora::BigVectorId idLhs,
							Fora::BigVectorId idRhs,
							hash_type vecHash,
							boost::function<Fora::PageId (BigVectorPageLayout)> onSyntheticPageCreated,
							boost::function<hash_type ()> createNewVectorHash,
							uint32_t maxPageSizeInBytes
							);

	Fora::BigVectorId registerBigVectorConcat(
							Fora::BigVectorId idLhs,
							BigVectorPageLayout inRhs,
							hash_type vecHash,
							boost::function<Fora::PageId (BigVectorPageLayout)> onSyntheticPageCreated,
							boost::function<hash_type ()> createNewVectorHash,
							uint32_t maxPageSizeInBytes
							);

	void sendAddDropState(boost::function1<void, Cumulus::CumulusWorkerAddDropEvent> eventConsumer);

	void restrictToAddDropState(const Cumulus::AddDropFinalState& state);

private:
	boost::recursive_mutex mMutex;

	Cumulus::MachineId mMachineId;

	MapWithIndex<Fora::PageId, Fora::BigVectorId> mSyntheticPages;

	std::set<Fora::PageId> mSyntheticPagesRealized;

	map<Fora::BigVectorId, BigVectorPageLayout> mLayouts;

	map<Fora::BigVectorId, BigVectorPageLayout> mOldLayouts;

	map<hash_type, Fora::BigVectorId> mGuidsToLayouts;

	TwoWaySetMap<Fora::PageId, Fora::BigVectorId> mPagesToVectors;

	TwoWaySetMap<Fora::PageId, Fora::BigVectorId> mOldPagesToVectors;

	std::map<ImmutableTreeSet<hash_type>, uint64_t> mBytecountsForHashes;
};


}
}

