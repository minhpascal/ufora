/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../Judgment/JudgmentOnValue.hppml"
#include "VectorDataIDSlice.hppml"
#include "../../VectorDataManager/BigVectorId.hppml"
#include "../../VectorDataManager/BigVectorSlice.hppml"

namespace TypedFora {
namespace Abi {

@type BigVectorPageLayout =
		ImmutableTreeVector<VectorDataIDSlice> vectorIdentities,
		ImmutableTreeSet<int64_t> cumulativeSizes,
		ImmutableTreeSet<uint64_t> cumulativeBytecounts,
		Fora::BigVectorId identity
{
public:
	BigVectorPageLayout(VectorDataID id, uint64_t count, JudgmentOnResult jor, hash_type inGuid);

	BigVectorPageLayout(VectorDataID id, uint64_t count, JudgmentOnValue jov, hash_type inGuid);

	BigVectorPageLayout(VectorDataIDSlice slice, JudgmentOnResult jor, hash_type inGuid);

	BigVectorPageLayout(ImmutableTreeVector<VectorDataIDSlice> identities, JudgmentOnResult jor, hash_type inGuid);

	ImmutableTreeVector<Fora::PageId> getPagesReferenced() const;

	ImmutableTreeVector<Fora::PageId> getPagesReferenced(long indexLow, long indexHigh) const;

	int64_t size() const { return identity().size(); }

	uint64_t bytecount() const;

	Fora::PageId pageAtIndex(int64_t index) const;

	long sliceAtIndex(int64_t index) const;

	VectorDataID vectorDataIdAtIndex(int64_t index) const;

	JudgmentOnResult jor() const;

	pair<VectorDataIDSlice, int64_t> sliceAndOffsetContainingIndex(int64_t index) const;

	//if we divide our vectors into blocks of 'fragmentSize' bytes (where a page is contained in the
	//block indicated by its first byte), return the appropriate slicing parameters into
	//'vectorIdentities' to find all the other pages in the same fragment as this one.
	pair<int32_t, int32_t> fragmentContaining(int32_t pageIndex, uint32_t fragmentSize);

	ImmutableTreeVector<VectorDataIDSlice> slicesCoveringRange(int64_t lowValue, int64_t highValue) const;

	ImmutableTreeVector<VectorDataIDSlice> slicesCoveringRange(IntegerRange sequence) const;

	ImmutableTreeVector<pair<Fora::PageId, IntegerSequence> > slicesCoveringRange(IntegerSequence sequence) const;

	Nullable<pair<int64_t, int64_t> > mapIndicesToExactSliceRange(Fora::BigVectorSlice slice) const;

	static BigVectorPageLayout concatenate(const BigVectorPageLayout& lhs, const BigVectorPageLayout& rhs, hash_type inGuid);

	BigVectorPageLayout slice(
					Nullable<int64_t> low,
					Nullable<int64_t> high,
					hash_type inGuid
					);

	BigVectorPageLayout slice(IntegerRange sequence, hash_type inGuid);

	BigVectorPageLayout slice(
					int64_t low,
					int64_t high,
					hash_type inGuid
					);

	int64_t startIndex(long slice) const;

	int64_t sliceSize(long slice) const;

	void validateInternalState() const;
};

}
}


