/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <stdint.h>
#include "../cppml/CPPMLPrettyPrinter.hppml"

/****************

IntegerRange

Utility class to model the range of int64_t

	[low, high)

****************/

@type IntegerRange = int64_t low, int64_t high {
public:
	IntegerRange(int64_t inHigh)
		{
		low() = 0;
		high() = inHigh;
		}

	Nullable<IntegerRange> isSequentialWith(const IntegerRange& otherSequence) const
		{
		if (high() != otherSequence.low())
			return null();
		return null() << IntegerRange(low(), otherSequence.high());
		}

	IntegerRange slice(int64_t low, int64_t high) const
		{
		return slice(null() << low, null() << high);
		}

	IntegerRange slice(Nullable<int64_t> nLow, Nullable<int64_t> nHigh) const
		{
		int64_t lowVal = (nLow ? *nLow : 0);
		int64_t highVal = (nHigh ? *nHigh : size());

		if (lowVal < 0)
			lowVal += size();
		if (lowVal < 0)
			lowVal = 0;

		if (highVal < 0)
			highVal += size();

		if (highVal > size())
			highVal = size();

		if (lowVal >= highVal)
			return IntegerRange(0,0);

		int64_t newSize = highVal - lowVal;

		if (newSize == 0)
			return IntegerRange(0,0);

		return IntegerRange(low() + lowVal, low() + lowVal + newSize);
		}

	//note that this is not "python" slicing. This is range composition.
	IntegerRange slice(IntegerRange valuesWithinRange) const
		{
		if (valuesWithinRange.low() < 0)
			valuesWithinRange.low() = 0;
		if (valuesWithinRange.high() > size())
			valuesWithinRange.high() = size();

		return IntegerRange(low() + valuesWithinRange.low(), low() + valuesWithinRange.high());
		}

	int64_t size() const
		{
		return std::max<int64_t>(0, high() - low());
		}

	bool isEmpty() const
		{
		return low() >= high();
		}

	bool overlaps(const IntegerRange& other) const
		{
		return low() < other.high() && other.low() < high();
		}

	IntegerRange intersect(const IntegerRange& other) const
		{
		IntegerRange res(
			std::max<int64_t>(low(), other.low()),
			std::min<int64_t>(high(), other.high())
			);

		if (res.high() < res.low())
			res.high() = res.low();

		return res;
		}

	IntegerRange operator+(int64_t other) const
		{
		return IntegerRange(
			low() + other,
			high() + other
			);
		}

	IntegerRange operator*(int64_t m) const
		{
		return IntegerRange(
			low() * m,
			high() * m
			);
		}

	IntegerRange operator-(int64_t other) const
		{
		return IntegerRange(
			low() - other,
			high() - other
			);
		}

	bool contains(IntegerRange child) const
		{
		return low() <= child.low() && high() >= child.high();
		}
};


template<>
class CPPMLPrettyPrint<IntegerRange> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const IntegerRange& t)
			{
			s << "[" << t.low() << "," << t.high() << ")";
			}
};

